#+STARTUP: overview hidestars indent align inlineimages

*
Settings
  
#+BEGIN_SRC emacs-lisp

  ;; hide startup message
  (setq inhibit-startup-message t)

  ;;
  (tool-bar-mode -1)

  ;; ;; enable line numbers globally
  ;; (global-linum-mode t)
  (when (fboundp 'global-display-line-numbers-mode)
    (global-display-line-numbers-mode 1))

  ;; nicer theme
  (use-package sweet-theme
    :ensure t
    :init
    (load-theme 'sweet t))


  ;; add .bin/local to PATH variable the current
  ;; this is because I start emacs with
  ;; env HOME=$HOME/somefolder

  (defun joindirs (root &rest dirs)
    "Joins a series of directories together,
       like Python's os.path.join
       (joindirs \"/a\" \"b\" \"c\") => /a/b/c"
    (if (not dirs)
        root
      (apply 'joindirs
             (expand-file-name (car dirs) root)
             (cdr dirs))))

  (setenv "PATH" (concat (getenv "PATH") ":"
                         (joindirs (getenv "HOME") ".bin" "local")))

  ;; get conda environment
  (require 'json)

  (defun get-conda-envs-dir ()
    "Get the primary directory where Conda environments are stored."
    (let* ((output (process-lines "conda" "info" "--json"))
           (json-object-type 'hash-table)
           (json-array-type 'list)
           (json-key-type 'string)
           (info (json-read-from-string (mapconcat 'identity output "\n")))
           (envs-dirs (gethash "envs_dirs" info)))
      (if envs-dirs
          (car envs-dirs)
        (error "Could not determine Conda environments directory"))))

   ;; set conda env as workon
  (defun set-conda-envs-dir-as-workon ()
    "Set the Conda environments directory as the WORKON environment variable."
    (let ((conda-envs-dir (get-conda-envs-dir)))
      (setenv "WORKON_HOME" conda-envs-dir)
      (message "WORKON_HOME set to %s" conda-envs-dir)))

#+END_SRC

* Python settings


  #+BEGIN_SRC emacs-lisp

    ;; manually add two dependencies

    (use-package spinner
      :ensure t)

    (use-package compat
      :ensure t)

    (use-package elpy
      :ensure t
      :config
      (elpy-enable)
      ;; (setq elpy-rpc-virtualenv-path 'current) ;; otherwise error
      ;; do: sudo apt install virtualenv
      ;;     sudo apt install python3-pip
      (setq elpy-rpc-python-command "python3")
      ;; otherwise error on M-x elpy-config
      ;; 'Neither easy_install nor pip found
      ;;  use ipython
      (setq python-shell-interpreter "ipython"
            python-shell-interpreter-args "-i --simple-prompt")
      ;; to be able to use pyvenv-workon, one has to set $WORKON_HOME var
      (set-conda-envs-dir-as-workon))
  #+END_SRC

  - Automatic error indication

  - run while cursor in Python buffer: C-c C-c
    (it opens \*Python\* buffer)

  - it supports via `pyvenv` package virtual environments
    use existing virtual env         M-x pyvenv-workon <path-to-python-in-conda> RET
    deactivate virtual env           M-x pyvenv-deactivate
    
  - config elpy:                     M-x elpy-config

* Python Debugging

#+begin_src emacs-lisp
  (use-package dape
    :preface
    ;; By default dape shares the same keybinding prefix as `gud'
    ;; If you do not want to use any prefix, set it to nil.
    ;; (setq dape-key-prefix "\C-x\C-a")

    :hook
    ;; Save breakpoints on quit
    ((kill-emacs . dape-breakpoint-save)
     ;; Load breakpoints on startup
     (after-init . dape-breakpoint-load))

    :init
    ;; To use window configuration like gud (gdb-mi)
    ;; (setq dape-buffer-window-arrangement 'gud)

    :config
    ;; Info buffers to the right
    (setq dape-buffer-window-arrangement 'right)

    ;; Global bindings for setting breakpoints with mouse
    (dape-breakpoint-global-mode)

    ;; Pulse source line (performance hit)
    ;; (add-hook 'dape-display-source-hook 'pulse-momentary-highlight-one-line)

    ;; To not display info and/or buffers on startup
    ;; (remove-hook 'dape-start-hook 'dape-info)
    ;; (remove-hook 'dape-start-hook 'dape-repl)

    ;; To display info and/or repl buffers on stopped
    ;; (add-hook 'dape-stopped-hook 'dape-info)
    ;; (add-hook 'dape-stopped-hook 'dape-repl)

    ;; Kill compile buffer on build success
    ;; (add-hook 'dape-compile-hook 'kill-buffer)

    ;; Save buffers on startup, useful for interpreted languages
    ;; (add-hook 'dape-start-hook (lambda () (save-some-buffers t t)))

    ;; Projectile users
    (setq dape-cwd-fn 'projectile-project-root)
    )
#+end_src

#+RESULTS:
| dape-breakpoint-load | package--save-selected-packages | org-persist-load-all | tramp-register-archive-autoload-file-name-handler | magit-maybe-define-global-key-bindings |
